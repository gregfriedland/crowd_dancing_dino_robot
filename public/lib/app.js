// Generated by CoffeeScript 1.8.0
(function() {
  var a, accel, barViz, r, reporter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  accel = (function() {
    function accel() {
      this.onMove = __bind(this.onMove, this);
      this.processEvent = __bind(this.processEvent, this);
      this.start = __bind(this.start, this);
    }

    accel.prototype.ready = false;

    accel.prototype.start = function() {
      console.log("starting accel senseing");
      return window.addEventListener('devicemotion', (function(_this) {
        return function(data) {
          return _this.processEvent(data);
        };
      })(this), false);
    };

    accel.prototype.processEvent = function(data) {
      var alpha, beta, dec, f, gamma, ra, _i, _len, _ref, _results;
      alpha = data.alpha;
      beta = data.beta;
      gamma = data.gamma;
      ra = alpha;
      dec = gamma;
      data = {
        x: data.acceleration.x,
        y: data.acceleration.y,
        z: data.acceleration.z
      };
      _ref = this.callbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push(f(data));
      }
      return _results;
    };

    accel.prototype.onMove = function(func) {
      this.callbacks || (this.callbacks = []);
      return this.callbacks.push(func);
    };

    return accel;

  })();

  reporter = (function() {
    function reporter() {
      this.add_agg_callback = __bind(this.add_agg_callback, this);
      this.report_data = __bind(this.report_data, this);
      this.start = __bind(this.start, this);
    }

    reporter.prototype.ready = false;

    reporter.prototype.start = function() {
      this.socket = io();
      this.ad_callbacks = [];
      return this.socket.on("agg_data", (function(_this) {
        return function(ad) {
          var callback, _i, _len, _ref, _results;
          console.log("agg data ", ad);
          _ref = _this.ad_callbacks;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            _results.push(callback(ad));
          }
          return _results;
        };
      })(this));
    };

    reporter.prototype.report_data = function(data) {
      return this.socket.emit("boogy_data", data);
    };

    reporter.prototype.add_agg_callback = function(cb) {
      return this.ad_callbacks.push(cb);
    };

    return reporter;

  })();

  barViz = (function() {
    function barViz() {
      this.update = __bind(this.update, this);
      this.start = __bind(this.start, this);
    }

    barViz.prototype.start = function(element) {
      this.element = element;
      return $(element).append("<div class='slider'></div>");
    };

    barViz.prototype.update = function(data) {
      var d;
      d = data + 50;
      console.log($("" + this.element + " .slider"));
      return $("" + this.element + " .slider").css("left", "" + d + "%");
    };

    return barViz;

  })();

  a = new accel();

  r = new reporter();

  r.start();

  a.start();

  r.add_agg_callback(function(data) {
    window.xaggViz.update(data.x);
    window.yaggViz.update(data.y);
    return window.zaggViz.update(data.z);
  });

  $(document).ready(function() {
    window.xViz = new barViz();
    window.yViz = new barViz();
    window.zViz = new barViz();
    window.xaggViz = new barViz();
    window.yaggViz = new barViz();
    window.zaggViz = new barViz();
    window.xViz.start("#xViz");
    window.yViz.start("#yViz");
    window.zViz.start("#zViz");
    window.xaggViz.start("#xaggViz");
    window.yaggViz.start("#yaggViz");
    window.zaggViz.start("#zaggViz");
    a.onMove(r.report_data);
    return a.onMove(function(data) {
      window.xViz.update(data.x);
      window.yViz.update(data.y);
      return window.zViz.update(data.z);
    });
  });

}).call(this);
