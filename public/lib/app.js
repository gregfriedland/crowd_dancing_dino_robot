// Generated by CoffeeScript 1.8.0
(function() {
  var a, accel, accelInterval, barXYZViz, r, reporter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  accelInterval = 50;

  accel = (function() {
    function accel() {
      this.onMove = __bind(this.onMove, this);
      this.processEvent = __bind(this.processEvent, this);
      this.start = __bind(this.start, this);
    }

    accel.prototype.start = function() {
      console.log("starting accel sensing");
      return window.addEventListener('devicemotion', (function(_this) {
        return function(data) {
          return _this.processEvent(data);
        };
      })(this), false);
    };

    accel.prototype.processEvent = function(data) {
      var alpha, beta, f, gamma, _i, _len, _ref, _results;
      alpha = data.alpha;
      beta = data.beta;
      gamma = data.gamma;
      data = {
        x: data.acceleration.x,
        y: data.acceleration.y,
        z: data.acceleration.z
      };
      _ref = this.callbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push(f(data));
      }
      return _results;
    };

    accel.prototype.onMove = function(func) {
      this.callbacks || (this.callbacks = []);
      return this.callbacks.push(func);
    };

    return accel;

  })();

  reporter = (function() {
    function reporter() {
      this.add_agg_callback = __bind(this.add_agg_callback, this);
      this.report_data = __bind(this.report_data, this);
      this.start = __bind(this.start, this);
    }

    reporter.prototype.start = function() {
      this.socket = io();
      this.ad_callbacks = [];
      return this.socket.on("agg_data", (function(_this) {
        return function(ad) {
          var callback, _i, _len, _ref, _results;
          _ref = _this.ad_callbacks;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            _results.push(callback(ad));
          }
          return _results;
        };
      })(this));
    };

    reporter.prototype.report_data = function(data) {
      return this.socket.emit("boogy_data", data);
    };

    reporter.prototype.add_agg_callback = function(cb) {
      return this.ad_callbacks.push(cb);
    };

    return reporter;

  })();

  barXYZViz = (function() {
    function barXYZViz(id, parent) {
      this.remove = __bind(this.remove, this);
      this.update = __bind(this.update, this);
      var html;
      this.id = id;
      html = "<div id=bars" + this.id + ">";
      html += "<div class='slide_cont' id='xViz'><div class='slider'></div></div>";
      html += "</div>";
      $(parent).append(html);
    }

    barXYZViz.prototype.update = function(data) {
      data = {
        x: data.x + 50,
        y: data.y + 50,
        z: data.z + 50
      };
      return $("#bars" + this.id + " #xViz .slider").css("left", "" + data.x + "%");
    };

    barXYZViz.prototype.remove = function() {
      return $("#bars" + this.id).html("");
    };

    return barXYZViz;

  })();

  a = new accel();

  r = new reporter();

  r.start();

  a.start();

  r.add_agg_callback((function(_this) {
    return function(data) {
      console.log("data: " + JSON.stringify(data));
      return _this.vizs[0].update(data);
    };
  })(this));

  $(document).ready((function(_this) {
    return function() {
      _this.vizs = {};
      _this.vizs[-1] = new barXYZViz(-1, "#selfdata");
      _this.vizs[0] = new barXYZViz(0, "#aggdata");
      _this.lastUpdateTime = 0;
      console.log("ready");
      return a.onMove(function(data) {
        var currTime;
        currTime = new Date().getTime();
        if (currTime > _this.lastUpdateTime + accelInterval) {
          _this.vizs[-1].update(data);
          r.report_data(data);
          return _this.lastUpdateTime = currTime;
        }
      });
    };
  })(this));

}).call(this);
